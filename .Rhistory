region  ="CA",
postal_code = 94105,
iso_country_code = "US",
strict_address_match =TRUE)
get_placekey <- function(location_name = NULL, street_address = NULL,
city = NULL, region = NULL, postal_code = NULL,
iso_country_code = NULL,
strict_address_match = FALSE,
strict_name_match = FALSE,
key = Sys.getenv("PLACEKEY_SECRET")) {
# cast postal_code to character just incase it is not.
# the api requires it
postal_code = as.character(postal_code)
query_list <- list(location_name = location_name,
street_address = street_address,
city = city,
region = region,
postal_code = postal_code,
iso_country_code = iso_country_code) %>%
purrr::discard(is.null)
options_list <- list(
strict_name_match = strict_name_match,
strict_address_match = strict_address_match
)
# query_list
#
# purrr::discard(query_list, is.null)
#  return(query_list)
q <- httr::POST("https://api.placekey.io/v1/placekey",
body = list(query = query_list, options = options_list),
httr::add_headers(apikey = key), encode = "json")
res <- content(q)
res
}
get_placekey(
street_address = "1543 Mission Street, Floor 3",
city = "San Francisco",
region  ="CA",
postal_code = 94105,
iso_country_code = "US",
strict_address_match =TRUE)
get_placekey <- function(location_name = NULL, street_address = NULL,
city = NULL, region = NULL, postal_code = NULL,
iso_country_code = NULL,
strict_address_match = FALSE,
strict_name_match = FALSE,
key = Sys.getenv("PLACEKEY_SECRET")) {
# cast postal_code to character just incase it is not.
# the api requires it
postal_code = as.character(postal_code)
query_list <- list(location_name = location_name,
street_address = street_address,
city = city,
region = region,
postal_code = postal_code,
iso_country_code = iso_country_code) %>%
purrr::discard(is.null)
options_list <- list(
strict_name_match = strict_name_match,
strict_address_match = strict_address_match
)
# query_list
#
# purrr::discard(query_list, is.null)
#  return(query_list)
q <- httr::POST("https://api.placekey.io/v1/placekey",
body = list(query = query_list, options = options_list),
httr::add_headers(apikey = key), encode = "json")
res <- content(q)
if (is.null(res$placekey)) {
return(res$error)
}
res$placekey
}
get_placekey(
street_address = "1543 Mission Street, Floor 3",
city = "San Francisco",
region  ="CA",
postal_code = 94105,
iso_country_code = "US",
strict_address_match =TRUE)
get_placekey(
street_address = "1543 Mission Street, Floor 3",
city = "San Francisco",
region  ="CA",
postal_code = 94105,
iso_country_code = "US",
strict_address_match =F)
devtools::document()
library(placekey)
placekey_to_h3(pk)
library(placekey)
(x <- coord_to_placekey(10,10))
placekey_to_h3(x)
h3_to_placekey(placekey_to_h3(x))
pk <- get_placekey(
street_address = "1543 Mission Street, Floor 3",
city = "San Francisco",
region  ="CA",
postal_code = 94105,
iso_country_code = "US")
pk
placekey_to_h3(pk)
placekey_to_h3(pk) %>%
h3_to_placekey()
library(placekey)
library(placekey)
(x <- coord_to_placekey(10,10))
placekey_to_h3(x)
h3_to_placekey(placekey_to_h3(x))
pk <- get_placekey(
street_address = "1543 Mission Street, Floor 3",
city = "San Francisco",
region  ="CA",
postal_code = 94105,
iso_country_code = "US"
)
pk <- get_placekey(
street_address = "1543 Mission Street, Floor 3",
city = "San Francisco",
region  ="CA",
postal_code = 94105,
iso_country_code = "US"
)
pk
devtools::document()
library(placekey)
?predict.lm
#' Query the Placekey API
#'
#' Queries the Placekey API and, if successful, returns a placekey.
#'
#' @importFrom httr add_headers POST content
#' @importFrom purrr discard
#' @importFrom magrittr %>%
#' @export
#'
get_placekey <- function(location_name = NULL, street_address = NULL,
city = NULL, region = NULL, postal_code = NULL,
iso_country_code = NULL,
strict_address_match = FALSE,
strict_name_match = FALSE,
key = Sys.getenv("PLACEKEY_SECRET")) {
UseMethod("get_placekey")
}
get_placekey.default <- function(location_name = NULL, street_address = NULL,
city = NULL, region = NULL, postal_code = NULL,
iso_country_code = NULL,
strict_address_match = FALSE,
strict_name_match = FALSE,
key = Sys.getenv("PLACEKEY_SECRET")) {
# cast postal_code to character just incase it is not.
# the api requires it
postal_code = as.character(postal_code)
query_list <- list(location_name = location_name,
street_address = street_address,
city = city,
region = region,
postal_code = postal_code,
iso_country_code = iso_country_code) %>%
purrr::discard(is.null)
options_list <- list(
strict_name_match = strict_name_match,
strict_address_match = strict_address_match
)
q <- httr::POST("https://api.placekey.io/v1/placekey",
body = list(query = query_list, options = options_list),
httr::add_headers(apikey = key), encode = "json")
res <- content(q)
if (is.null(res$placekey)) {
return(res$error)
}
res$placekey
}
devtools::document()
?get_placekey
?rlang::have_name()
?vctrs::s3_register()
?rlang::has_name()
list(location_name = location_name,
street_address = street_address,
city = city,
region = region,
postal_code = postal_code,
iso_country_code = iso_country_code)
c("location_name", "street_address",
"city", "region",
"postal_code", "iso_country_code",
"strict_name_match", "strict_address_match"
)
placekey_names <- c("location_name", "street_address",
"city", "region",
"postal_code", "iso_country_code",
"strict_name_match", "strict_address_match")
placekey_names
readr::read_rds("/Users/josiah/github/boston_bars.rds")
boston_bars <- readr::read_rds("/Users/josiah/github/boston_bars.rds")
boston_bars %>%
select(name, street_number)
library(tidyverse)
boston_bars %>%
select(name, street_number)
?deparse
boston_bars %>%
select(name, street_number, street_name)
View(boston_bars)
boston_bars$administrative_area_level_2
boston_bars$administrative_area_level_1
boston_bars %>%
select(name, street_number, route, city = locality,
county = administrative_area_level_2,
state = administrative_area_level_1,
postal_code)
boston_bars %>%
select(location_name = name, street_number, route, city = locality,
region = administrative_area_level_1,
postal_code)
?unite
boston_bars %>%
select(location_name = name, street_number, route, city = locality,
region = administrative_area_level_1,
postal_code) %>%
unite(street_address, street_number, route, sep = " ")
boston_bars %>%
select(location_name = name, street_number, route, city = locality,
region = administrative_area_level_1,
postal_code) %>%
unite(street_address, street_number, route, sep = " ") %>%
mutate(iso_country_code = "US")
usethis::use_data_raw()
## code to prepare `DATASET` dataset goes here
boston_bars <- readr::read_rds("/Users/josiah/github/boston_bars.rds") %>%
select(location_name = name, street_number, route, city = locality,
region = administrative_area_level_1,
postal_code) %>%
unite(street_address, street_number, route, sep = " ") %>%
mutate(iso_country_code = "US")
usethis::use_data(boston_bars, overwrite = TRUE)
boston_bars
?substitute()
rlang::has_name(boston_bars, placekey_names)
has_pk_cols <- rlang::has_name(boston_bars, placekey_names)
placekey_names[has_pk_cols]
placekey_names[!has_pk_cols]
setdiff()
?setdiff()
?new_tibble()
as.list(placekey_names)
?as.list(placekey_names)
as.list(placekey_names, all.names = T)
list(8)
matrix(ncol = 8, nrow = 9)
matrix(ncol = 8, nrow = 0)
data.frame(matrix(ncol = 8, nrow = 0))
colnames(pk_df) <- placekey_names
pk_df <- data.frame(matrix(ncol = 8, nrow = 0))
colnames(pk_df) <- placekey_names
pk_df
setdiff(pk_df, boston_bars)
?setdiff(pk_df, boston_bars)
setequal(pk_df, boston_bars)
bind_rows(pk_df, boston_bars)
pk_df
pk_df %>% class()
pk_df %>% tibble()
pk_df %>% tibble() %>% bind_rows(boston_bars)
.data_names <- names(boston_bar)
.data_names <- names(boston_bars)
.data_names
"strict_name_match" %in% .data_names
validate_pk_col <- function(col_name, .data_names) {
if (!"strict_name_match" %in% .data_names) {
FALSE
}
}
validate_pk_col("strict_name_match", .data_names)
boston_bars %>%
mutate(
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE)
)
boston_bars %>%
mutate(
location_name = ifelse("strict_name_match" %in% .data_names, location_name, FALSE)
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE)
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
)
boston_bars %>%
mutate(
location_name = ifelse("strict_name_match" %in% .data_names, location_name, FALSE),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE)
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
)
boston_bars %>%
mutate(
location_name = ifelse("strict_name_match" %in% .data_names, location_name, FALSE),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
)
boston_bars %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, FALSE),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
)
boston_bars %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
)
pmap(get_placekey)
.data %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
) %>%
slice(1:10) %>%
pmap(get_placekey)
.data %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
) %>%
slice(1:10)
boston_bars %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
) %>%
slice(1:10) %>%
pmap(get_placekey)
boston_bars %>% slice(9,10)
boston_bars %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
) %>%
slice(1:10) %>%
pmap_chr(get_placekey)
# create missing columns if needed.
.data_filled <- .data %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
)
get_placekey.data.frame <- function(.data, ) {
# create vector of names to check against
.data_names <- names(boston_bars)
# create missing columns if needed.
.data_filled <- .data %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, FALSE),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, FALSE)
)
.data_pks <- pmap_chr(.data_filled, get_placekey)
mutate(.data, placekey = .data_pks)
}
get_placekey.data.frame <- function(.data, strict_name_match, strict_address_match) {
if (missing(strict_name_match)) {
name_match <- FALSE
}
if (missing(strict_address_match)) {
address_match <- FALSE
}
# create vector of names to check against
.data_names <- names(boston_bars)
# create missing columns if needed.
.data_filled <- .data %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, name_match),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, address_match)
)
.data_pks <- pmap_chr(.data_filled, get_placekey)
mutate(.data, placekey = .data_pks)
}
get_placekey(boston_bars)
get_placekey(boston_bars[1:5, ])
placekey_names
datapasta::vector_paste(placekey_names)
pk_names <- c("location_name", "street_address", "city", "region", "postal_code", "iso_country_code", "strict_name_match", "strict_address_match")
has_pk_cols <- rlang::has_name(boston_bars, placekey_names)
placekey_names[!has_pk_cols]
pk_names <- c("street_address", "city", "region", "postal_code", "iso_country_code")
has_pk_cols <- rlang::has_name(boston_bars, pk_names)
placekey_names[!has_pk_cols]
any(has_pk_cols)
any(!has_pk_cols)
rlang::has_name(select(boston_bars, -city), pk_names)
any(missing_pks)
missing_pks <- rlang::has_name(select(boston_bars, -city), pk_names)
any(missing_pks)
any(!missing_pks)
?any
any(!missing_pks)
missing_pks <- rlang::has_name(boston_bars, pk_names)
any(!missing_pks)
placekey_names[!has_pk_cols]
pk_names[!missing_pks]
missing_pks <- rlang::has_name(boston_bars, pk_names)
missing_pks <- rlang::has_name(select(boston_bars, -city), pk_names)
if (any(!missing_pks)) {
pk_names[!missing_pks]
stop("")
}
pk_names[!missing_pks]
?glue::glue_collapse()
glue::glue_collapse(pk_names[!missing_pks])
missing_pks <- rlang::has_name(select(boston_bars, -city, -postal_code), pk_names)
glue::glue_collapse(pk_names[!missing_pks])
glue::glue_collapse(pk_names[!missing_pks], ", ")
glue::glue_collapse(pk_names[!missing_pks], ", ", last = "and ")
glue::glue_collapse(pk_names[!missing_pks], ", ", last = " and")
glue::glue_collapse(pk_names[!missing_pks], ", ", last = " and ")
stop(glue::glue("Missing columns {missing_cols}")
}
stop(glue::glue("Missing columns {missing_cols}"))
missing_cols <- glue::glue_collapse(pk_names[!missing_pks], ", ", last = " and ")
stop(glue::glue("Missing columns {missing_cols}"))
if (any(!missing_pks)) {
missing_cols <- glue::glue_collapse(pk_names[!missing_pks], ", ", last = " and ")
stop(glue::glue("Missing columns: {missing_cols}"))
}
missing_cols <- glue::glue_collapse("`{pk_names[!missing_pks]}`", ", ", last = " and ")
stop(glue::glue("Missing columns: {missing_cols}"))
missing_cols <- glue::glue_collapse("{pk_names[!missing_pks]}", ", ", last = " and ")
stop(glue::glue("Missing columns: {missing_cols}"))
if (any(!missing_pks)) {
missing_cols <- glue::glue_collapse("{pk_names[!missing_pks]}", ", ", last = " and ")
stop(glue::glue("Missing columns: {missing_cols}"))
}
missing_cols <- glue::glue_collapse(pk_names[!missing_pks], ", ", last = " and ")
stop(glue::glue("Missing columns: {missing_cols}"))
#' @param .data A dataframe containing the columns
#' @export
get_placekey.data.frame <- function(.data, strict_name_match, strict_address_match) {
# validate the provide data frame
pk_names <- c("street_address", "city", "region", "postal_code", "iso_country_code")
missing_pks <- rlang::has_name(.data, pk_names)
if (any(!missing_pks)) {
missing_cols <- glue::glue_collapse(pk_names[!missing_pks], ", ", last = " and ")
stop(glue::glue("Missing columns: {missing_cols}"))
}
if (missing(strict_name_match)) {
name_match <- FALSE
}
if (missing(strict_address_match)) {
address_match <- FALSE
}
# create vector of names to check against
.data_names <- names(boston_bars)
# create missing columns if needed.
.data_filled <- .data %>%
mutate(
location_name = ifelse("location_name" %in% .data_names, location_name, NA_character_),
strict_name_match = ifelse("strict_name_match" %in% .data_names, strict_name_match, name_match),
strict_address_match = ifelse("strict_name_match" %in% .data_names, strict_address_match, address_match)
)
.data_pks <- pmap_chr(.data_filled, get_placekey)
mutate(.data, placekey = .data_pks)
}
boston_bars
boston_bars %>%
select(-city) %>%
get_placekey()
devtools::document()
devtools::document()
?get_placekey
?get_placekey.data.frame
devtools::document()
devtools::document()
devtools::document()
devtools::document()
?get_placekey.data.frame
??get_placekey.data.frame
devtools::document()
devtools::document()
?UseMethod
devtools::document()
?get_placekey.data.frame
devtools::document()
devtools::install()
devtools::document()
placekey::coord_to_placekey(0, 0, 1)
placekey::coord_to_placekey(0, 0)
library(placekey)
Rcpp::compileAttributes()
devtools::load_all(".")
placekey::coord_to_h3_int(0, 0, 1)
?placekey::h3_int_to_string()
placekey::h3_int_to_string(626740323050688500)
library(placekey)
placekey::h3_int_to_string(626740323050688500)
devtools::document()
devtools::load_all(".")
placekey::h3_int_to_string(626740323050688500)
library(placekey)
placekey::h3_int_to_string(626740323050688500)
Rcpp::compileAttributes()
devtools::load_all(".")
placekey::h3_int_to_string(626740323050688500)
library(placekey)
placekey::h3_int_to_string(626740323050688500)
devtools::document()
library(placekey)
placekey::coord_to_placekey()
