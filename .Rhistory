# gets h3 int from coord 00 w resolution RESOLUTION
# converts to binary
# Will work on this when i need it
#origin <- h3r::getCIndexFromCoords(0, 0, res = RESOLUTION)
BASE_CELL_SHIFT = 2 ^ (3 * 15)    # Adding this will increment the base cell value by 1
UNUSED_RESOLUTION_FILLER = 2 ^ (3 * (15 - BASE_RESOLUTION)) - 1
FIRST_TUPLE_REGEX = paste0('[', ALPHABET, REPLACEMENT_CHARS, PADDING_CHAR , ']{3}')
TUPLE_REGEX = paste0('[', ALPHABET, REPLACEMENT_CHARS, ']{3}')
# WHERE_REGEX = re.compile(
#   '^' + '-'.join([FIRST_TUPLE_REGEX, TUPLE_REGEX, TUPLE_REGEX]) + '$')
# WHAT_REGEX = re.compile('^[' + ALPHABET + ']{3}(-[' + ALPHABET + ']{3})?$')
# this will convert multiple placekeys to h3 string
library(magrittr)
pk <- "@dvt-smp-tw2"
pk2 <- "zzz@dvt-smp-tw2"
splits <- strsplit(pk2, "@")
pks <- purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(pks[1])-1))
ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))
(1:8) ^ ALPHABET_LENGTH
map(char_indexes, stringr::str_sub, )
stringr::str_sub(pks[1], -1, -1)
-1 - char_indexes
map(-1 - char_indexes, stringr::str_sub, .x , .x)
purrr::map(-1 - char_indexes, stringr::str_sub, .x , .x)
purrr::map(.x = -1 - char_indexes, stringr::str_sub, .x , .x)
purrr::map(.x = -1 - char_indexes, ~stringr::str_sub(pks[1], .x , .x))
purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(pks[1], .x , .x))
alphabet_indexes <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(pks[1], .x , .x))
?stringr::str_locate()
stringr::str_locate(ALPHABET, alphabet_indexes)
stringr::str_locate(ALPHABET, alphabet_indexes)$start
stringr::str_locate(ALPHABET, alphabet_indexes)[,1]
x <- stringr::str_locate(ALPHABET, alphabet_indexes)[,1]
x
(ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x
options(scipen = 999)
(ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x
sum((ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x)
x
pks[1]
nchar(pks)
char_indexes <- (0:(nchar(pks[1])-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(pks[1], .x , .x))
char_alphabet
char_alphabet
x
x <- stringr::str_locate(ALPHABET, alphabet_indexes)[,1] - 1
c
x
sum((ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x)
char_index
char_indexes
decoded_string <- sum((ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x)
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x)
short_h3_integer
(3 * (15 - BASE_RESOLUTION))
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
short_h3_integer ^ (3 * (15 - BASE_RESOLUTION))
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
HEADER_INT
UNUSED_RESOLUTION_FILLER
BASE_CELL_SHIFT
HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
# Taking the calculated value from python.
HEADER_INT <- 621496748577128448
HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::getBoundingHexFromIndex(623560421467685376)
h3r::getBoundingHexFromIndex("623560421467685376"
)
unshortened_h3
h3_to_placekey <- function(h3_string) {
short_h3_int <- shorten_h3_integer(h3_integer)
encoded_short_int <- encode_short_int(short_h3_int)
cleaned_encoded <- clean_string(encoded_short_int)
index_start <- seq(1, nchar(cleaned_encoded), by = TUPLE_LENGTH)
index_stop <- index_start + TUPLE_LENGTH -1
encoded_splits <- purrr::map2_chr(.x = index_start,
.y = index_stop,
.f = ~substr(cleaned_encoded, .x, .y))
paste0("@", paste0(encoded_splits, collapse = "-"))
}
h3_to_placekey("8a754e649930200")
# shorten h3 integer
#' @keywords internal
shorten_h3_integer <- function(h3_integer) {
out <- (h3_integer + BASE_CELL_SHIFT) %% (2 ** 52)
floor(out / 2^(3 *(15 - BASE_RESOLUTION)))
}
#' @keywords internal
encode_short_int <- function(short_h3_int) {
# if short_h3_int == 0:
#   return(substr(ALPHABET,1,1))
# else:
res = character()
remainder <- integer()
while(short_h3_int > 0) {
remainder = short_h3_int %% ALPHABET_LENGTH + 1
res = append(res, substr(ALPHABET, remainder , remainder))
short_h3_int = floor(short_h3_int / ALPHABET_LENGTH)
}
paste0(rev(res), collapse = "")
}
#' @keywords internal
clean_string <- function(encoded_short_int) {
cleaned <- stringr::str_replace_all(encoded_short_int, REPLACEMENT_MAP)
stringr::str_pad(cleaned, 9, "left", "a")
}
#' Generate Placekey from a coordinate
h3_to_placekey("8a754e649930200")
# shorten h3 integer
#' @keywords internal
shorten_h3_integer <- function(h3_integer) {
out <- (h3_integer + BASE_CELL_SHIFT) %% (2 ** 52)
floor(out / 2^(3 *(15 - BASE_RESOLUTION)))
}
#' @keywords internal
encode_short_int <- function(short_h3_int) {
# if short_h3_int == 0:
#   return(substr(ALPHABET,1,1))
# else:
res = character()
remainder <- integer()
while(short_h3_int > 0) {
remainder = short_h3_int %% ALPHABET_LENGTH + 1
res = append(res, substr(ALPHABET, remainder , remainder))
short_h3_int = floor(short_h3_int / ALPHABET_LENGTH)
}
paste0(rev(res), collapse = "")
}
#' @keywords internal
clean_string <- function(encoded_short_int) {
cleaned <- stringr::str_replace_all(encoded_short_int, REPLACEMENT_MAP)
stringr::str_pad(cleaned, 9, "left", "a")
}
h3_to_placekey("8a754e649930200")
h3_integer
h3_to_placekey <- function(h3_string) {
h3_integer <- h3r::h3_string_to_int(h3_string)
short_h3_int <- shorten_h3_integer(h3_integer)
encoded_short_int <- encode_short_int(short_h3_int)
cleaned_encoded <- clean_string(encoded_short_int)
index_start <- seq(1, nchar(cleaned_encoded), by = TUPLE_LENGTH)
index_stop <- index_start + TUPLE_LENGTH -1
encoded_splits <- purrr::map2_chr(.x = index_start,
.y = index_stop,
.f = ~substr(cleaned_encoded, .x, .y))
paste0("@", paste0(encoded_splits, collapse = "-"))
}
h3_to_placekey("8a754e649930200")
devtools::load_all(".")
devtools::document()
devtools::document()
devtools::document()
h3_to_placekey("8a754e649930200")
library(magrittr)
pk <- "@dvt-smp-tw2"
pk2 <- "zzz@dvt-smp-tw2"
splits <- strsplit(pk2, "@")
pks <- purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
# Decode string!
char_indexes <- (0:(nchar(pks[1])-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(pks[1], .x , .x))
x <- stringr::str_locate(ALPHABET, alphabet_indexes)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
library(magrittr)
pk <- "@dvt-smp-tw2"
pk2 <- "zzz@dvt-smp-tw2"
splits <- strsplit(pk2, "@")
pks <- purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(pks[1])-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(pks[1], .x , .x))
x <- stringr::str_locate(ALPHABET, alphabet_indexes)[,1] - 1
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
x
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x)
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
unshortened_h3
h3r::h3_int_to_string(unshortened_h3)
h3_to_placekey(h3r::h3_int_to_string(unshortened_h3))
h3_to_placekey(h3r::h3_int_to_string(unshortened_h3-1))
h3_to_placekey(h3r::h3_int_to_string(unshortened_h3-10))
h3_to_placekey(h3r::h3_int_to_string(unshortened_h3-100))
coord_to_placekey(0,0)
h3r::getCIndexFromCoords(0,0,10)
option(scipen = 999)
options(scipen = 999)
option(scipen = 999)
h3r::getCIndexFromCoords(0,0,10)
short_h3_int <- shorten_h3_integer(h3_integer)
h3r::getCIndexFromCoords(0,0,10)
h3_integer<-h3r::getCIndexFromCoords(0,0,10)
short_h3_int <- shorten_h3_integer(h3_integer)
short_h3_int
encoded_short_int <- encode_short_int(short_h3_int)
encoded_short_int
h3r::getCIndexFromCoords(0,0,10)
h3r::h3_int_to_string(h3r::getCIndexFromCoords(0,0,10))
h3r::h3_string_to_int(h3r::h3_int_to_string(h3r::getCIndexFromCoords(0,0,10)))
coord_to_placekey(0,0)
placekey_to_h3(coord_to_placekey(0,0))
placekey_to_h3 <- function(placekey) {
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(placekey[1])-1))
# Decode string!
char_indexes <- (0:(nchar(pks[1])-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(pks[1], .x , .x))
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::h3_int_to_string(unshortened_h3)
}
placekey_to_h3(coord_to_placekey(0,0))
h3_to_placekey(placekey_to_h3(coord_to_placekey(0,0)))
placekey_to_h3 <- function(placekey) {
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(placekey[1])-1))
# Decode string!
char_indexes <- (0:(nchar(pks[1])-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(pks[1], .x , .x))
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::h3_int_to_string(unshortened_h3 - 100)
}
h3_to_placekey(placekey_to_h3(coord_to_placekey(0,0)))
h3_to_placekey(placekey_to_h3(coord_to_placekey(10,0)))
h3_to_placekey(placekey_to_h3(coord_to_placekey(100,0)))
h3_to_placekey(placekey_to_h3(coord_to_placekey(100,20)))
coord_to_placekey(10, 10)
placekey_to_h3(coord_to_placekey(10, 10))
placekey_to_h3 <- function(placekey) {
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(placekey[1])-1))
# Decode string!
char_indexes <- (0:(nchar(placekey[1])-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(placekey[1], .x , .x))
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(placekey[1])-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::h3_int_to_string(unshortened_h3 - 100)
}
placekey_to_h3(coord_to_placekey(10, 10))
placekey_to_h3(pk)
pks
placekey_to_h3 <- function(placekey) {
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(placekey[1])-1))
# Decode string!
char_indexes <- (0:(nchar(placekey[1])-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(placekey[1], .x , .x))
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(placekey[1])-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::h3_int_to_string(unshortened_h3)
}
placekey_to_h3(pk)
placekey <- pk
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
uncleaned_key
(0:(nchar(placekey[1])-1))
placekey
placekey_to_h3 <- function(placekey) {
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(uncleaned_key[1])-1))
# Decode string!
char_indexes <- (0:(nchar(placekey[1])-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(placekey[1], .x , .x))
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(placekey[1])-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::h3_int_to_string(unshortened_h3)
}
placekey_to_h3(pk)
placekey_to_h3 <- function(placekey) {
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(uncleaned_key)-1))
# Decode string!
char_indexes <- (0:(nchar(uncleaned_key)-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(uncleaned_key, .x , .x))
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(placekey[1])-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::h3_int_to_string(unshortened_h3)
}
placekey_to_h3(pk)
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(uncleaned_key)-1))
# Decode string!
char_indexes <- (0:(nchar(uncleaned_key)-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(uncleaned_key, .x , .x))
char_alphabet
char_indexes
x
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(placekey[1])-1))) * x)
placekey_to_h3 <- function(placekey) {
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
# Decode string!
char_indexes <- (0:(nchar(uncleaned_key)-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(uncleaned_key, .x , .x))
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(uncleaned_key)-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::h3_int_to_string(unshortened_h3)
}
placekey_to_h3(pk)
h3_to_placekey(placekey_to_h3(pk))
placekey_to_h3(pk)
pk
placekey_to_h3 <- function(placekey) {
uncleaned_key <- strsplit(placekey, "@")[[1]][[2]] %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
# Decode string!
char_indexes <- (0:(nchar(uncleaned_key)-1))
char_alphabet <- purrr::map_chr(.x = -1 - char_indexes, ~stringr::str_sub(uncleaned_key, .x , .x))
x <- stringr::str_locate(ALPHABET, char_alphabet)[,1] - 1
short_h3_integer <- sum((ALPHABET_LENGTH ^ (0:(nchar(uncleaned_key)-1))) * x)
# Unshorten integer
# unshifted_int = short_h3_integer << (3 * (15 - BASE_RESOLUTION))
unshifted_int <- short_h3_integer * 2^(3 * (15 - BASE_RESOLUTION))
unshortened_h3 <- HEADER_INT + UNUSED_RESOLUTION_FILLER - BASE_CELL_SHIFT + unshifted_int
h3r::h3_int_to_string(unshortened_h3-100)
}
placekey_to_h3(pk)
h3_to_placekey(placekey_to_h3(pk))
y <- coord_to_placekey(10,10)
placekey_to_h3(y)
h3_to_placekey(placekey_to_h3(y))
y
devtools::document()
devtools::install()
devtools::document()
library(httr)
readRenviron(".Renviron")
key = Sys.getenv("PLACEKEY_SECRET")
key
add_headers(apikey = key)
?POST
list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
"postal_code"= "94105",
"iso_country_code"= "US"
))
POST("https://api.placekey.io/v1/placekey",
body = list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
"postal_code"= "94105",
"iso_country_code"= "US"
)),
add_headers(apikey = key)
)
POST("https://api.placekey.io/v1/placekey",
body = list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
"postal_code"= "94105",
"iso_country_code"= "US"
)),
add_headers(apikey = key), encode = "json"
)
x <- POST("https://api.placekey.io/v1/placekey",
body = list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
"postal_code"= "94105",
"iso_country_code"= "US"
)),
add_headers(apikey = key), encode = "json"
)
content(x)
x <- POST("https://api.placekey.io/v1/placekey",
body = list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
"postal_code"= NULL,
"iso_country_code"= "US"
)),
add_headers(apikey = key), encode = "json"
)
content(x)
x <- POST("https://api.placekey.io/v1/placekey",
body = list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
#"postal_code"= NULL,
"iso_country_code"= "US"
)),
add_headers(apikey = key), encode = "json"
)
content(x)
x <- POST("https://api.placekey.io/v1/placekey",
body = list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
"postal_code"= 94105
#"iso_country_code"= "US"
)),
add_headers(apikey = key), encode = "json"
)
content(x)
x <- POST("https://api.placekey.io/v1/placekey",
body = list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
"postal_code"= "94105"
#"iso_country_code"= "US"
)),
add_headers(apikey = key), encode = "json"
)
content(x)
x <- POST("https://api.placekey.io/v1/placekey",
body = list(query = list(
street_address = "1543 Mission Street, Floor 3",
"city" =  "San Francisco",
"region"= "CA",
"postal_code"= "94105",
"iso_country_code"= "US"
)),
add_headers(apikey = key), encode = "json"
)
content(x)
get_placekey <- function(location_name, street_address, city, region, postal_code, iso_country_code,
strict_address_match = FALSE,
strict_name_match = FALSE) {
query_list <- list(location_name = location_name,
street_address = street_address,
city = city,
region = region,
postal_code = postal_code,
iso_country_code)
query_list
}
get_placekey()
