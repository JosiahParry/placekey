x = x // ALPHABET_LENGTH
}
?while
while(x > 0){
remainder = x %% ALPHABET_LENGTH
res = ALPHABET[remainder] + res
x = x // ALPHABET_LENGTH
}
shorten_h3_integer(h3_integer)
x <- shorten_h3_integer(h3_integer)
while(x > 0){
remainder = x %% ALPHABET_LENGTH
res = ALPHABET[remainder] + res
x = floor(x / ALPHABET_LENGTH)
}
else:
res = ''
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = ALPHABET[remainder] + res
x = floor(x / ALPHABET_LENGTH)
}
shorten_h3_integer(h3_integer)
shorten_h3_integer(h3_integer) -> x
clipr::write_clip(x)
remainder <- integer()
x
res = character()
remainder <- integer()
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, strsub(ALPHABET, remainder, remainder)
x = floor(x / ALPHABET_LENGTH)
}
return res
}
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, strsub(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
}
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
}
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
print(res)
print(remainder)
}
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
x/ ALPHABET_LENGTH
x
ALPHABET_LENGTH
ALPHABET_LENGTH = nchar(ALPHABET)
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
res
else:
res = character()
remainder <- integer()
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
res
x / ALPHABET_LENGTH
shorten_h3_integer(h3_integer) -> x
x %% ALPHABET_LENGTH
x %% ALPHABET_LENGTH -> remainder
substr(ALPHABET, remainder, remainder)
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
res
paste0(res, collapse = "")
rev(paste0(res, collapse = ""))
rev(paste0(res, collapse = ""))
paste0(res, collapse = "")
paste0(rev(res), collapse = "")
x
shorten_h3_integer(h3_integer) -> x
x
clipr::write_clip(x)
while(x > 0) {
remainder = x %% ALPHABET_LENGTH
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
shorten_h3_integer(h3_integer) -> x
while(x > 0) {
remainder = x %% ALPHABET_LENGTH - 1
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
paste0(rev(res), collapse = "")
else:
res = character()
shorten_h3_integer(h3_integer) -> x
encode_short_int <- function(x) {
if x == 0:
return(substr(ALPHABET,1,1))
else:
res = character()
remainder <- integer()
while(x > 0) {
remainder = x %% ALPHABET_LENGTH - 1
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
paste0(rev(res), collapse = "")
}
encode_short_int <- function(x) {
# if x == 0:
#   return(substr(ALPHABET,1,1))
# else:
res = character()
remainder <- integer()
while(x > 0) {
remainder = x %% ALPHABET_LENGTH - 1
res = append(res, substr(ALPHABET, remainder, remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
paste0(rev(res), collapse = "")
}
encode_short_int(x)
shorten_h3_integer(h3_integer) -> x
encode_short_int(x)
options(scipen = 999)
encode_short_int(x)
ALPHABET
x
x %%ALPHABET_LENGTH
substr(ALPHABET, remainder, remainder)
substr(ALPHABET, remainder+1, remainder+1)
ALPHABET
remainder = x %% ALPHABET_LENGTH
remainder
substr(ALPHABET, remainder , remainder)
substr(ALPHABET, remainder +1 , remainder + 1)
encode_short_int <- function(x) {
# if x == 0:
#   return(substr(ALPHABET,1,1))
# else:
res = character()
remainder <- integer()
while(x > 0) {
remainder = x %% ALPHABET_LENGTH + 1
res = append(res, substr(ALPHABET, remainder , remainder))
x = floor(x / ALPHABET_LENGTH)
print(x)
#print(res)
#print(remainder)
}
paste0(rev(res), collapse = "")
}
encode_short_int(x)
encode_short_int(x) -> s
s
clipr::write_clip(s)
REPLACEMENT_MAP
REPLACEMENT_MAP_chars
REPLACEMENT_CHARS
encode_short_int(x)
s
tools::package.dependencies("stringi")
tools::package_dependencies("stringi")
tools::package_dependencies("stringr")
tools::package_dependencies("stringi", recursive = T
)
tools::package_dependencies("stringr", recursive = T)
REPLACEMENT_MAP
clean_string <- function(s) {
stringi::stri_replace_all(s, REPLACEMENT_MAP)
}
clean_string(s)
s
stringr::str_replace_all
clean_string <- function(s) {
stringr::stri_replace_all(s, REPLACEMENT_MAP)
}
clean_string(s)
clean_string <- function(s) {
stringr::str_replace_all(s, REPLACEMENT_MAP)
}
clean_string(s)
CODE_LENGTH
PADDING_CHAR
clean_string <- function(encoded_short_int) {
stringr::str_replace_all(encoded_short_int, REPLACEMENT_MAP) %>%
stringr::str_pad(9, "left", "a")
}
clean_string(s)
cleaned <- stringr::str_replace_all(encoded_short_int, REPLACEMENT_MAP)
stringr::str_pad(cleaned, 9, "left", "a")
clean_string <- function(encoded_short_int) {
cleaned <- stringr::str_replace_all(encoded_short_int, REPLACEMENT_MAP)
stringr::str_pad(cleaned, 9, "left", "a")
}
clean_string(s)
h3_integer
s
TUPLE_LENGTH
seq(0, 11, by = 3)
seq(0, 11, by = TUPLE_LENGTH)
encode_short_int(x) -> s
clean_string(s)
encode_short_int <- function(short_h3_int) {
# if short_h3_int == 0:
#   return(substr(ALPHABET,1,1))
# else:
res = character()
remainder <- integer()
while(short_h3_int > 0) {
remainder = short_h3_int %% ALPHABET_LENGTH + 1
res = append(res, substr(ALPHABET, remainder , remainder))
short_h3_int = floor(short_h3_int / ALPHABET_LENGTH)
}
paste0(rev(res), collapse = "")
}
encode_short_int(x) -> s
s
clean_string(s)
clean_string(s) -> cleaned_encoded
seq(1, nchar(cleaned_encoded), by = TUPLE_LENGTH)
index_start <- seq(1, nchar(cleaned_encoded), by = TUPLE_LENGTH)
index_stop <- index_start + TUPLE_LENGTH
index_stop
cleaned_encoded
strsub(seq(0, 11, by = TUPLE_LENGTH), index_start[1], index_stop[1])
substr(seq(0, 11, by = TUPLE_LENGTH), index_start[1], index_stop[1])
substr(cleaned_encoded, index_start[1], index_stop[1])
map2(index_start, index_start, ~substr(cleaned_encoded, .x, .y))
purrr::map2(index_start, index_start, ~substr(cleaned_encoded, .x, .y))
purrr::map2(index_start, index_start, print)
purrr::map2(index_start, index_start, print(.x, .y))
purrr::map2(index_start, index_stop, ~substr(cleaned_encoded, .x, .y))
index_stop <- index_start + TUPLE_LENGTH -1
purrr::map2(index_start, index_stop, ~substr(cleaned_encoded, .x, .y))
purrr::map2_chr(.x = index_start,
.y = index_stop,
.f = ~substr(cleaned_encoded, .x, .y))
encoded_splits <- purrr::map2_chr(.x = index_start,
.y = index_stop,
.f = ~substr(cleaned_encoded, .x, .y))
paste0("@", encoded_splits)
paste0(encoded_splits, collapse = "-")
paste0("@", paste0(encoded_splits, collapse = "-"))
RESOLUTION
geo_to_h3 <- function(lat, long) {
h3_integer <- h3r::getCIndexFromCoords(lat, long, res = RESOLUTION)
short_h3_int <- shorten_h3_integer(h3_integer)
encoded_short_int <- encode_short_int(short_h3_int)
cleaned_encoded <- clean_string(encoded_short_int)
index_start <- seq(1, nchar(cleaned_encoded), by = TUPLE_LENGTH)
index_stop <- index_start + TUPLE_LENGTH -1
encoded_splits <- purrr::map2_chr(.x = index_start,
.y = index_stop,
.f = ~substr(cleaned_encoded, .x, .y))
paste0("@", paste0(encoded_splits, collapse = "-"))
}
geo_to_h3 <- function(lat, long) {
h3_integer <- h3r::getCIndexFromCoords(lat, long, res = RESOLUTION)
short_h3_int <- shorten_h3_integer(h3_integer)
encoded_short_int <- encode_short_int(short_h3_int)
cleaned_encoded <- clean_string(encoded_short_int)
index_start <- seq(1, nchar(cleaned_encoded), by = TUPLE_LENGTH)
index_stop <- index_start + TUPLE_LENGTH -1
encoded_splits <- purrr::map2_chr(.x = index_start,
.y = index_stop,
.f = ~substr(cleaned_encoded, .x, .y))
paste0("@", paste0(encoded_splits, collapse = "-"))
}
geo_to_h3(Houston$lat, Houston$lon)
geo_to_h3(Houston$lat, Houston$lon)
geo_to_placekey <- function(lat, long) {
h3_integer <- h3r::getCIndexFromCoords(lat, long, res = RESOLUTION)
short_h3_int <- shorten_h3_integer(h3_integer)
encoded_short_int <- encode_short_int(short_h3_int)
cleaned_encoded <- clean_string(encoded_short_int)
index_start <- seq(1, nchar(cleaned_encoded), by = TUPLE_LENGTH)
index_stop <- index_start + TUPLE_LENGTH -1
encoded_splits <- purrr::map2_chr(.x = index_start,
.y = index_stop,
.f = ~substr(cleaned_encoded, .x, .y))
paste0("@", paste0(encoded_splits, collapse = "-"))
}
geo_to_h3(Houston$lat, Houston$lon)
geo_to_placekey(Houston$lat, Houston$lon)
Houston <- list(lat = 29.7632836, lon = -95.3632715)
geo_to_placekey(Houston$lat, Houston$lon)
usethis::use_readme_rmd()
Houston
devtools::install()
devtools::load_all()
placekey::coord_to_placekey(29.76328, -95.36327)
devtools::document()
?placekey::coord_to_placekey(29.76328, -95.36327)
devtools::document()
devtools::document()
placekey::coord_to_placekey(0,0)
placekey::coord_to_placekey(0,0)
placekey::coord_to_placekey(0,0)
placekey::coord_to_placekey(0,0)
placekey::coord_to_placekey(0,0)
placekey::coord_to_placekey(0.0,0.0)
placekey::coord_to_placekey(42.3601, 71.0589)
placekey::coord_to_placekey(71.0589, 42.3601)
lon <- 71.0589
long <- 71.0589
h3_integer <- h3r::getCIndexFromCoords(lat, long, res = RESOLUTION)
lat <- 42.3601
long <- 71.0589
h3_integer <- h3r::getCIndexFromCoords(lat, long, res = RESOLUTION)
h3_integer
short_h3_int <- shorten_h3_integer(h3_integer)
source('~/.active-rstudio-document', echo=TRUE)
short_h3_int <- shorten_h3_integer(h3_integer)
short_h3_int
shorten_h3_integer
BASE_RESOLUTION
15 - BASE_RESOLUTION
(3 *(15 - BASE_RESOLUTION))
bitwShiftR(599446713466880, 9)
?bitwShiftR(599446713466880, 9)
bitwShiftR(599446713466880L, 9)
2^9
floor(599446713466880/ 2^9)
floor(out / 2^(3 *(15 - BASE_RESOLUTION)))
out <- (h3_integer + BASE_CELL_SHIFT) %% (2 ** 52)
floor(out / 2^(3 *(15 - BASE_RESOLUTION)))
devtools::load_all(".")
placekey::coord_to_placekey(0, 0)
devtools::install()
devtools::document()
devtools::document()
?devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::install()
pk <- "@dvt-smp-tw2"
strsplit(pk, "@")
pk2 <- "zzz@dvt-smp-tw2"
strsplit(pk2, "@")
splits <- strsplit(pk2, "@")
splits
map(pk, strsplit, "@")
purrr::map(pk, strsplit, "@")
purrr::map(pk, ~strsplit(.x, "@"[[1]][[2]2]))
purrr::map(pk, ~strsplit(.x, "@")[[1]][[2]2])
purrr::map(pk, ~strsplit(.x, "@")[[1]][[2]])
purrr::map_chr(pk, ~strsplit(.x, "@")[[1]][[2]])
purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]])
pks <- purrr::map_chr(pk, ~strsplit(.x, "@")[[1]][[2]])
stringr::str_replace_all(pks, "-", "")
pks <- purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]])
stringr::str_replace_all(pks, "-", "")
PADDING_CHAR
# Environment variables
RESOLUTION = 10
BASE_RESOLUTION = 12
ALPHABET = tolower('23456789BCDFGHJKMNPQRSTVWXYZ')
ALPHABET_LENGTH = nchar(ALPHABET)
CODE_LENGTH = 9
TUPLE_LENGTH = 3
PADDING_CHAR = 'a'
REPLACEMENT_CHARS = "eu"
REPLACEMENT_MAP = c(
"prn" = "pre",
"f4nny" = "f4nne",
"tw4t" = "tw4e",
"ngr" = "ngu",  # 'u' avoids introducing 'gey'
"dck" = "dce",
"vjn" = "vju",  # 'u' avoids introducing 'jew'
"fck" = "fce",
"pns" = "pne",
"sht" = "she",
"kkk" = "kke",
"fgt" = "fgu", # 'u' avoids introducing 'gey'
"dyk" = "dye",
"bch" = "bce"
)
# HEADER_BITS = bin(h3_int.geo_to_h3(0.0, 0.0, resolution=RESOLUTION))[2:].zfill(64)[:12]
# gets h3 int from coord 00 w resolution RESOLUTION
# converts to binary
# Will work on this when i need it
#origin <- h3r::getCIndexFromCoords(0, 0, res = RESOLUTION)
BASE_CELL_SHIFT = 2 ^ (3 * 15)    # Adding this will increment the base cell value by 1
UNUSED_RESOLUTION_FILLER = 2 ^ (3 * (15 - BASE_RESOLUTION)) - 1
FIRST_TUPLE_REGEX = paste0('[', ALPHABET, REPLACEMENT_CHARS, PADDING_CHAR , ']{3}')
TUPLE_REGEX = paste0('[', ALPHABET, REPLACEMENT_CHARS, ']{3}')
# WHERE_REGEX = re.compile(
#   '^' + '-'.join([FIRST_TUPLE_REGEX, TUPLE_REGEX, TUPLE_REGEX]) + '$')
# WHAT_REGEX = re.compile('^[' + ALPHABET + ']{3}(-[' + ALPHABET + ']{3})?$')
PADDING_CHAR
stringr::str_replace_all(pks, "-", "")
tools::package_dependencies("magrittr")
stringr::str_replace_all(pks, "-", "", recursive = T)
tools::package_dependencies("magrittr", recursive =T)
# this will convert multiple placekeys to h3 string
library(magrittr)
ALPHABET
stringr::str_replace_all(pks, "-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "")
pks <- purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all(pks, "-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "")
pks <- purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "")
pks
REPLACEMENT_MAP
rev(REPLACEMENT_MAP)
str_replace_all
?stringr::str_replace_all
purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(REPLACEMENT_MAP)
purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
pks[1]
nchar(pks[1])
0:(nchar(pks[1])-1)
0:(nchar(pks[1])-1) ^ ALPHABET_LENGTH
0:(nchar(pks[1])-1)
0:(nchar(pks[1])-1)^2
(0:(nchar(pks[1])-1))^2
(0:(nchar(pks[1])-1))^ALPHABET_LENGTH
(0:(nchar(pks[1])-1)) **ALPHABET_LENGTH
(0:(nchar(pks[1])-1)) ^ ALPHABET_LENGTH
options(scipen = 999)
(0:(nchar(pks[1])-1)) ^ ALPHABET_LENGTH
ALPHABET_LENGTH
ALPHABET_LENGTH ^3
(0:(nchar(pks[1])-1))
?exp
1:3 ^ 2
(1:3) ^ 2
ALPHABET_LENGTH^8
(0:(nchar(pks[1])-1))
(0:(nchar(pks[1])-1)) ^ ALPHABET_LENGTH
(1:8) ^ ALPHABET_LENGTH
8 ^ ALPHABET_LENGTH
7 ^ ALPHABET_LENGTH
ALPHABET_LENGTH ^ (0:(nchar(pks[1])-1))
substr(pks[1])
pks[1]
substr(pks[1], -1,-1)
stringr::str_sub()
?stringr::str_sub()
stringr::str_sub(pks[1], -1,-1)
char_lengths <- (0:(nchar(pks[1])-1))
char_indexes <- (0:(nchar(pks[1])-1))
char_indexes
-1 - char_indexes
library(magrittr)
pk <- "@dvt-smp-tw2"
pk2 <- "zzz@dvt-smp-tw2"
splits <- strsplit(pk2, "@")
pks <- purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
char_indexes <- (0:(nchar(pks[1])-1))
pks <- purrr::map_chr(c(pk, pk2), ~strsplit(.x, "@")[[1]][[2]]) %>%
stringr::str_replace_all("-", "") %>%
stringr::str_replace_all(PADDING_CHAR, "") %>%
stringr::str_replace_all(rev(REPLACEMENT_MAP))
